/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Organisation as PrismaOrganisation,
  BillingAccount as PrismaBillingAccount,
  Membership as PrismaMembership,
  Subscription as PrismaSubscription,
} from "@prisma/client";

export class OrganisationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrganisationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.organisation.count(args);
  }

  async organisations(
    args: Prisma.OrganisationFindManyArgs
  ): Promise<PrismaOrganisation[]> {
    return this.prisma.organisation.findMany(args);
  }
  async organisation(
    args: Prisma.OrganisationFindUniqueArgs
  ): Promise<PrismaOrganisation | null> {
    return this.prisma.organisation.findUnique(args);
  }
  async createOrganisation(
    args: Prisma.OrganisationCreateArgs
  ): Promise<PrismaOrganisation> {
    return this.prisma.organisation.create(args);
  }
  async updateOrganisation(
    args: Prisma.OrganisationUpdateArgs
  ): Promise<PrismaOrganisation> {
    return this.prisma.organisation.update(args);
  }
  async deleteOrganisation(
    args: Prisma.OrganisationDeleteArgs
  ): Promise<PrismaOrganisation> {
    return this.prisma.organisation.delete(args);
  }

  async findBillingAccounts(
    parentId: string,
    args: Prisma.BillingAccountFindManyArgs
  ): Promise<PrismaBillingAccount[]> {
    return this.prisma.organisation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billingAccounts(args);
  }

  async findMemberships(
    parentId: string,
    args: Prisma.MembershipFindManyArgs
  ): Promise<PrismaMembership[]> {
    return this.prisma.organisation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .memberships(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.organisation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }
}
