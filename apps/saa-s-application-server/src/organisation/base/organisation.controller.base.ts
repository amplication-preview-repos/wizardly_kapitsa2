/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OrganisationService } from "../organisation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OrganisationCreateInput } from "./OrganisationCreateInput";
import { Organisation } from "./Organisation";
import { OrganisationFindManyArgs } from "./OrganisationFindManyArgs";
import { OrganisationWhereUniqueInput } from "./OrganisationWhereUniqueInput";
import { OrganisationUpdateInput } from "./OrganisationUpdateInput";
import { BillingAccountFindManyArgs } from "../../billingAccount/base/BillingAccountFindManyArgs";
import { BillingAccount } from "../../billingAccount/base/BillingAccount";
import { BillingAccountWhereUniqueInput } from "../../billingAccount/base/BillingAccountWhereUniqueInput";
import { MembershipFindManyArgs } from "../../membership/base/MembershipFindManyArgs";
import { Membership } from "../../membership/base/Membership";
import { MembershipWhereUniqueInput } from "../../membership/base/MembershipWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OrganisationControllerBase {
  constructor(
    protected readonly service: OrganisationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Organisation })
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOrganisation(
    @common.Body() data: OrganisationCreateInput
  ): Promise<Organisation> {
    return await this.service.createOrganisation({
      data: data,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Organisation] })
  @ApiNestedQuery(OrganisationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async organisations(@common.Req() request: Request): Promise<Organisation[]> {
    const args = plainToClass(OrganisationFindManyArgs, request.query);
    return this.service.organisations({
      ...args,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Organisation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async organisation(
    @common.Param() params: OrganisationWhereUniqueInput
  ): Promise<Organisation | null> {
    const result = await this.service.organisation({
      where: params,
      select: {
        createdAt: true,
        domain: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Organisation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOrganisation(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() data: OrganisationUpdateInput
  ): Promise<Organisation | null> {
    try {
      return await this.service.updateOrganisation({
        where: params,
        data: data,
        select: {
          createdAt: true,
          domain: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Organisation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOrganisation(
    @common.Param() params: OrganisationWhereUniqueInput
  ): Promise<Organisation | null> {
    try {
      return await this.service.deleteOrganisation({
        where: params,
        select: {
          createdAt: true,
          domain: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billingAccounts")
  @ApiNestedQuery(BillingAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "any",
  })
  async findBillingAccounts(
    @common.Req() request: Request,
    @common.Param() params: OrganisationWhereUniqueInput
  ): Promise<BillingAccount[]> {
    const query = plainToClass(BillingAccountFindManyArgs, request.query);
    const results = await this.service.findBillingAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,

        organisation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billingAccounts")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async connectBillingAccounts(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: BillingAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billingAccounts: {
        connect: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billingAccounts")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async updateBillingAccounts(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: BillingAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billingAccounts: {
        set: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billingAccounts")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async disconnectBillingAccounts(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: BillingAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billingAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/memberships")
  @ApiNestedQuery(MembershipFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "read",
    possession: "any",
  })
  async findMemberships(
    @common.Req() request: Request,
    @common.Param() params: OrganisationWhereUniqueInput
  ): Promise<Membership[]> {
    const query = plainToClass(MembershipFindManyArgs, request.query);
    const results = await this.service.findMemberships(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        organisation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/memberships")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async connectMemberships(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: MembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      memberships: {
        connect: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/memberships")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async updateMemberships(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: MembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      memberships: {
        set: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/memberships")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async disconnectMemberships(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: MembershipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      memberships: {
        disconnect: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: OrganisationWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        createdAt: true,
        endDate: true,
        id: true,

        organisation: {
          select: {
            id: true,
          },
        },

        startDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async connectSubscriptions(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async updateSubscriptions(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async disconnectSubscriptions(
    @common.Param() params: OrganisationWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateOrganisation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
