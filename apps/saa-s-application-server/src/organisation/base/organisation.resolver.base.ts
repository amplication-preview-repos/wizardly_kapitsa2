/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Organisation } from "./Organisation";
import { OrganisationCountArgs } from "./OrganisationCountArgs";
import { OrganisationFindManyArgs } from "./OrganisationFindManyArgs";
import { OrganisationFindUniqueArgs } from "./OrganisationFindUniqueArgs";
import { CreateOrganisationArgs } from "./CreateOrganisationArgs";
import { UpdateOrganisationArgs } from "./UpdateOrganisationArgs";
import { DeleteOrganisationArgs } from "./DeleteOrganisationArgs";
import { BillingAccountFindManyArgs } from "../../billingAccount/base/BillingAccountFindManyArgs";
import { BillingAccount } from "../../billingAccount/base/BillingAccount";
import { MembershipFindManyArgs } from "../../membership/base/MembershipFindManyArgs";
import { Membership } from "../../membership/base/Membership";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { OrganisationService } from "../organisation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Organisation)
export class OrganisationResolverBase {
  constructor(
    protected readonly service: OrganisationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "any",
  })
  async _organisationsMeta(
    @graphql.Args() args: OrganisationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Organisation])
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "any",
  })
  async organisations(
    @graphql.Args() args: OrganisationFindManyArgs
  ): Promise<Organisation[]> {
    return this.service.organisations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Organisation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "own",
  })
  async organisation(
    @graphql.Args() args: OrganisationFindUniqueArgs
  ): Promise<Organisation | null> {
    const result = await this.service.organisation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Organisation)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "create",
    possession: "any",
  })
  async createOrganisation(
    @graphql.Args() args: CreateOrganisationArgs
  ): Promise<Organisation> {
    return await this.service.createOrganisation({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Organisation)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "update",
    possession: "any",
  })
  async updateOrganisation(
    @graphql.Args() args: UpdateOrganisationArgs
  ): Promise<Organisation | null> {
    try {
      return await this.service.updateOrganisation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Organisation)
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "delete",
    possession: "any",
  })
  async deleteOrganisation(
    @graphql.Args() args: DeleteOrganisationArgs
  ): Promise<Organisation | null> {
    try {
      return await this.service.deleteOrganisation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillingAccount], { name: "billingAccounts" })
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "any",
  })
  async findBillingAccounts(
    @graphql.Parent() parent: Organisation,
    @graphql.Args() args: BillingAccountFindManyArgs
  ): Promise<BillingAccount[]> {
    const results = await this.service.findBillingAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Membership], { name: "memberships" })
  @nestAccessControl.UseRoles({
    resource: "Membership",
    action: "read",
    possession: "any",
  })
  async findMemberships(
    @graphql.Parent() parent: Organisation,
    @graphql.Args() args: MembershipFindManyArgs
  ): Promise<Membership[]> {
    const results = await this.service.findMemberships(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Subscription], { name: "subscriptions" })
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async findSubscriptions(
    @graphql.Parent() parent: Organisation,
    @graphql.Args() args: SubscriptionFindManyArgs
  ): Promise<Subscription[]> {
    const results = await this.service.findSubscriptions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
