/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BillingAccount as PrismaBillingAccount,
  Invoice as PrismaInvoice,
  Organisation as PrismaOrganisation,
} from "@prisma/client";

export class BillingAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BillingAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.billingAccount.count(args);
  }

  async billingAccounts(
    args: Prisma.BillingAccountFindManyArgs
  ): Promise<PrismaBillingAccount[]> {
    return this.prisma.billingAccount.findMany(args);
  }
  async billingAccount(
    args: Prisma.BillingAccountFindUniqueArgs
  ): Promise<PrismaBillingAccount | null> {
    return this.prisma.billingAccount.findUnique(args);
  }
  async createBillingAccount(
    args: Prisma.BillingAccountCreateArgs
  ): Promise<PrismaBillingAccount> {
    return this.prisma.billingAccount.create(args);
  }
  async updateBillingAccount(
    args: Prisma.BillingAccountUpdateArgs
  ): Promise<PrismaBillingAccount> {
    return this.prisma.billingAccount.update(args);
  }
  async deleteBillingAccount(
    args: Prisma.BillingAccountDeleteArgs
  ): Promise<PrismaBillingAccount> {
    return this.prisma.billingAccount.delete(args);
  }

  async findInvoices(
    parentId: string,
    args: Prisma.InvoiceFindManyArgs
  ): Promise<PrismaInvoice[]> {
    return this.prisma.billingAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoices(args);
  }

  async getOrganisation(parentId: string): Promise<PrismaOrganisation | null> {
    return this.prisma.billingAccount
      .findUnique({
        where: { id: parentId },
      })
      .organisation();
  }
}
