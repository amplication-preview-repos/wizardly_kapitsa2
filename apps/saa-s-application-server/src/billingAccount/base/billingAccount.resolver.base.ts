/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BillingAccount } from "./BillingAccount";
import { BillingAccountCountArgs } from "./BillingAccountCountArgs";
import { BillingAccountFindManyArgs } from "./BillingAccountFindManyArgs";
import { BillingAccountFindUniqueArgs } from "./BillingAccountFindUniqueArgs";
import { CreateBillingAccountArgs } from "./CreateBillingAccountArgs";
import { UpdateBillingAccountArgs } from "./UpdateBillingAccountArgs";
import { DeleteBillingAccountArgs } from "./DeleteBillingAccountArgs";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { Organisation } from "../../organisation/base/Organisation";
import { BillingAccountService } from "../billingAccount.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BillingAccount)
export class BillingAccountResolverBase {
  constructor(
    protected readonly service: BillingAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "any",
  })
  async _billingAccountsMeta(
    @graphql.Args() args: BillingAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BillingAccount])
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "any",
  })
  async billingAccounts(
    @graphql.Args() args: BillingAccountFindManyArgs
  ): Promise<BillingAccount[]> {
    return this.service.billingAccounts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BillingAccount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "own",
  })
  async billingAccount(
    @graphql.Args() args: BillingAccountFindUniqueArgs
  ): Promise<BillingAccount | null> {
    const result = await this.service.billingAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillingAccount)
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "create",
    possession: "any",
  })
  async createBillingAccount(
    @graphql.Args() args: CreateBillingAccountArgs
  ): Promise<BillingAccount> {
    return await this.service.createBillingAccount({
      ...args,
      data: {
        ...args.data,

        organisation: args.data.organisation
          ? {
              connect: args.data.organisation,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillingAccount)
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "update",
    possession: "any",
  })
  async updateBillingAccount(
    @graphql.Args() args: UpdateBillingAccountArgs
  ): Promise<BillingAccount | null> {
    try {
      return await this.service.updateBillingAccount({
        ...args,
        data: {
          ...args.data,

          organisation: args.data.organisation
            ? {
                connect: args.data.organisation,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BillingAccount)
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "delete",
    possession: "any",
  })
  async deleteBillingAccount(
    @graphql.Args() args: DeleteBillingAccountArgs
  ): Promise<BillingAccount | null> {
    try {
      return await this.service.deleteBillingAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Invoice], { name: "invoices" })
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "read",
    possession: "any",
  })
  async findInvoices(
    @graphql.Parent() parent: BillingAccount,
    @graphql.Args() args: InvoiceFindManyArgs
  ): Promise<Invoice[]> {
    const results = await this.service.findInvoices(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Organisation, {
    nullable: true,
    name: "organisation",
  })
  @nestAccessControl.UseRoles({
    resource: "Organisation",
    action: "read",
    possession: "any",
  })
  async getOrganisation(
    @graphql.Parent() parent: BillingAccount
  ): Promise<Organisation | null> {
    const result = await this.service.getOrganisation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
