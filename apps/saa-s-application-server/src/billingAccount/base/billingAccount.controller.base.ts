/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BillingAccountService } from "../billingAccount.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BillingAccountCreateInput } from "./BillingAccountCreateInput";
import { BillingAccount } from "./BillingAccount";
import { BillingAccountFindManyArgs } from "./BillingAccountFindManyArgs";
import { BillingAccountWhereUniqueInput } from "./BillingAccountWhereUniqueInput";
import { BillingAccountUpdateInput } from "./BillingAccountUpdateInput";
import { InvoiceFindManyArgs } from "../../invoice/base/InvoiceFindManyArgs";
import { Invoice } from "../../invoice/base/Invoice";
import { InvoiceWhereUniqueInput } from "../../invoice/base/InvoiceWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BillingAccountControllerBase {
  constructor(
    protected readonly service: BillingAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BillingAccount })
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBillingAccount(
    @common.Body() data: BillingAccountCreateInput
  ): Promise<BillingAccount> {
    return await this.service.createBillingAccount({
      data: {
        ...data,

        organisation: data.organisation
          ? {
              connect: data.organisation,
            }
          : undefined,
      },
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,

        organisation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BillingAccount] })
  @ApiNestedQuery(BillingAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async billingAccounts(
    @common.Req() request: Request
  ): Promise<BillingAccount[]> {
    const args = plainToClass(BillingAccountFindManyArgs, request.query);
    return this.service.billingAccounts({
      ...args,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,

        organisation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BillingAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async billingAccount(
    @common.Param() params: BillingAccountWhereUniqueInput
  ): Promise<BillingAccount | null> {
    const result = await this.service.billingAccount({
      where: params,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        name: true,

        organisation: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BillingAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBillingAccount(
    @common.Param() params: BillingAccountWhereUniqueInput,
    @common.Body() data: BillingAccountUpdateInput
  ): Promise<BillingAccount | null> {
    try {
      return await this.service.updateBillingAccount({
        where: params,
        data: {
          ...data,

          organisation: data.organisation
            ? {
                connect: data.organisation,
              }
            : undefined,
        },
        select: {
          balance: true,
          createdAt: true,
          id: true,
          name: true,

          organisation: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BillingAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBillingAccount(
    @common.Param() params: BillingAccountWhereUniqueInput
  ): Promise<BillingAccount | null> {
    try {
      return await this.service.deleteBillingAccount({
        where: params,
        select: {
          balance: true,
          createdAt: true,
          id: true,
          name: true,

          organisation: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/invoices")
  @ApiNestedQuery(InvoiceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Invoice",
    action: "read",
    possession: "any",
  })
  async findInvoices(
    @common.Req() request: Request,
    @common.Param() params: BillingAccountWhereUniqueInput
  ): Promise<Invoice[]> {
    const query = plainToClass(InvoiceFindManyArgs, request.query);
    const results = await this.service.findInvoices(params.id, {
      ...query,
      select: {
        amount: true,

        billingAccount: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dueDate: true,
        id: true,
        issueDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoices")
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "update",
    possession: "any",
  })
  async connectInvoices(
    @common.Param() params: BillingAccountWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        connect: body,
      },
    };
    await this.service.updateBillingAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoices")
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "update",
    possession: "any",
  })
  async updateInvoices(
    @common.Param() params: BillingAccountWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        set: body,
      },
    };
    await this.service.updateBillingAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoices")
  @nestAccessControl.UseRoles({
    resource: "BillingAccount",
    action: "update",
    possession: "any",
  })
  async disconnectInvoices(
    @common.Param() params: BillingAccountWhereUniqueInput,
    @common.Body() body: InvoiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoices: {
        disconnect: body,
      },
    };
    await this.service.updateBillingAccount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
