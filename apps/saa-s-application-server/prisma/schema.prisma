datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organisation {
  billingAccounts BillingAccount[]
  createdAt       DateTime         @default(now())
  domain          String?
  id              String           @id @default(cuid())
  memberships     Membership[]
  name            String?
  subscriptions   Subscription[]
  updatedAt       DateTime         @updatedAt
}

model Role {
  createdAt DateTime          @default(now())
  id        String            @id @default(cuid())
  roleType  EnumRoleRoleType?
  updatedAt DateTime          @updatedAt
}

model BillingAccount {
  balance        Float?
  createdAt      DateTime      @default(now())
  id             String        @id @default(cuid())
  invoices       Invoice[]
  name           String?
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  updatedAt      DateTime      @updatedAt
}

model Invoice {
  amount           Float?
  billingAccount   BillingAccount? @relation(fields: [billingAccountId], references: [id])
  billingAccountId String?
  createdAt        DateTime        @default(now())
  dueDate          DateTime?
  id               String          @id @default(cuid())
  issueDate        DateTime?
  updatedAt        DateTime        @updatedAt
}

model Membership {
  createdAt      DateTime      @default(now())
  id             String        @id @default(cuid())
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  updatedAt      DateTime      @updatedAt
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
}

model Event {
  createdAt      DateTime  @default(now())
  eventTimestamp DateTime?
  eventType      String?
  id             String    @id @default(cuid())
  payload        Json?
  updatedAt      DateTime  @updatedAt
}

model Subscription {
  createdAt      DateTime      @default(now())
  endDate        DateTime?
  id             String        @id @default(cuid())
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  organisationId String?
  startDate      DateTime?
  updatedAt      DateTime      @updatedAt
}

model User {
  createdAt   DateTime     @default(now())
  email       String?      @unique
  firstName   String?
  id          String       @id @default(cuid())
  lastName    String?
  memberships Membership[]
  password    String
  roles       Json
  updatedAt   DateTime     @updatedAt
  username    String       @unique
}

enum EnumRoleRoleType {
  Option1
}
